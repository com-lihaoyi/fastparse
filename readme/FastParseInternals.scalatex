@import Main._
@sect{Internals}
    @p
        FastParse 2.0.5 is implemented as a set of methods that perform a
        recursive-descent parse on the given input, with all book-keeping
        information maintained in the @code{fastparse.ParsingRun[T]} objects
        (abbreviated @code{fastparse.P[T]}). @code{ParsingRun}s are mutable,
        heavily stateful objects that keep track of everything related to the
        parse: the current index, whether backtracking is allowed, any value we
        may want to return, etc.. By defining your parsers as:

    @hl.scala
        def myParser[_p: P]: P[T] = P( ... )

    @p
        We ensure that a @code{ParsingRun} object is required to start the
        parse, the same instance is made available implicitly to any other
        parsers @code{myParser} may call and finally returned with the relevant
        value of type @code{T} stored in it.

    @sect{Inlining}

        @p
            FastParse heavily relies on inlining to achieve performance; many
            of the FastParse operators such as @code{a ~ b}, @code{!a},
            @code{a.rep} etc. are implemented using macros which inline their
            implementation code at the call-site.
        @p
            This inlining should be mostly transparent to you, as the operators
            would parse the same input and return the same values as if they
            were not inlined. The only thing you may notice is these operators
            do not appear in stack traces or profiles, as their code is inlined
            as part of the enclosing method (e.g. @hl.scala{def myParser}).

    @sect{Opacity}
        @p
            Fastparse parsers are opaque: as plain methods
            @hl.scala{def myParser[_p: P]: P[T]}, the only thing you can do is
            invoke them. You cannot programmatically inspect the body of a
            parser, see what other parsers it depends on, or perform any
            transformations on it. This in turn allows us to perform additional
            optimizations to improve performance of the parsing run.

    @sect{Synchronous}
        @p
            As plain methods, Fastparse parsers are synchrous: calling a parser
            method does not return  until the parse is complete. Even if
            parsing streaming input, FastParse will block
            on the input iterator until it either provides the text to parse
            or is exhausted.

    @sect{Stack-Limited}
        @p
            FastParse's parsing methods use the normal JVM method-call-stack
            to perform their recursive descent. This means that excessively
            deep or nested parses can cause a stack-overflow, which can be
            mitigated by the normal JVM flags to increase the stack size in
            memory.