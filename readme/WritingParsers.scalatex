@import Main._
@val tests = wd/'fastparse/'test/'src/'fastparse
@val main = wd/'fastparse/'src/'fastparse

@sect{Writing Parsers}
    @sect{Basic}
        @p
            The simplest parser matches a single string:

        @hl.ref(tests/"ExampleTests.scala", Seq("'simple", ""))

        @p
            Such a parser returns a @hl.scala{Parsed.Success} if the input matches the string, and otherwise returns a @hl.scala{Parsed.Failure}.
        @p
            As you can see, by default the @hl.scala{Parsed.Success} contains
            a @hl.scala{(): Unit}, unless you use @sect.ref{Capture} or
            @sect.ref{Map} described below.

        @p
            You can also wrap the strings in an @hl.scala{IgnoreCase("...")} if you want the matching to be case-insensitive.

        @p
            The @code{P(...)} lets you write mutually recursive parsers, without
            running into circular initialization problems, and gives the parser a
            nice, human-readable name (from the @hl.scala{def}
            it is being assigned to) which appears in parse error messages.
            In general, every time you assign a parser
            to a @hl.scala{def}, you should wrap it in @code{P(...)}.

        @sect{Failures}
            @hl.ref(tests/"ExampleTests.scala", Seq("'failures", ""))

            @p
                When parsing, dealing with failures is an important part of
                making things work. Fastparse provides three levels of error
                reporting you can ask for when a parse fails:
            @ol
                @li
                    The default @hl.scala{Parsed.Failure} only tells you the
                    position of the error message, without any clues what went
                    wrong at that position.
                @li
                    You can pass in the flag @hl.scala{verboseFailures = true}
                    to @code{fastparse.parse} to get a better description of what
                    caused the parse failure. This slows the parse down by a
                    significant amount (takes ~50% longer than a normal parse),
                    You can then use the @code{.msg} or @code{.longMsg} to see
                    what's going on.
                @li
                    You can call @code{failure.trace()} on an existing failure
                    to perform a second parse over the initial input. This also
                    gives you access to @code{failure.trace().msg} and
                    @code{failure.trace().longMsg}, but additionally provides
                    @code{.aggregateMsg} and @code{.longAggregateMsg} for
                    high-level listing of what was expected at point of failure,
                    or @code{.terminalsMsg} and @code{.longTerminalsMsg} for a
                    low-level view of what individual strings or characters
                    were expected at point of failure.

            @p
                In general, you may either want to run your parses with
                @code{verboseFailures} enabled, or run in the default fast mode
                and fall back to @code{.trace()} when
                something goes wrong. Often the number of parse failures is
                small compared to the number of successes, and this approach
                ensures the common success case is as fast as possible.

        @sect{Sequence}

            @hl.ref(tests/"ExampleTests.scala", Seq("'sequence", ""))

            @p
                You can combine two parsers with the @hl.scala{~} operator. This creates a new parser that only succeeds if both left and right parsers succeed one after another.

        @sect{Repeat}
            @hl.ref(tests/"ExampleTests.scala", Seq("'repeat", ""))

            @p
                The @hl.scala{.rep} method creates a new parser that attempts to parse the given parser zero or more times.
                If you want to parse something a given number of times, you can use @hl.scala{.rep(min = 2, max = 4)} o
                r the shorter @hl.scala{.rep(1)} for one or more times,
                in addition there is @hl.scala{exactly} parameter that if it's defined behaves
                like @hl.scala{min} and @hl.scala{max} equals to it.
                You can optionally provide an argument which acts as a separator between the usages of the original parser,
                such as a comma in @hl.scala{.rep(sep = ",")}.

        @sect{Optional}
            @hl.ref(tests/"ExampleTests.scala", Seq("'option", ""))

            @p
                Similar to @hl.scala{.rep} is @hl.scala{.?}, which creates a new parser that attempts to parse the given parser zero or 1 times.

        @sect{Either}
            @hl.ref(tests/"ExampleTests.scala", Seq("'either", ""))
            @p
                The @hl.scala{|} operator tries the parser on the left, and if that fails, tries the one on the right, failing only if both parsers fail.

        @sect{End, Start}
            @hl.ref(tests/"ExampleTests.scala", Seq("'end", ""))

            @p
                The @hl.scala{End} parser only succeeds if at the end of the input string. By default, a @hl.scala{Parser} does not need to consume the whole input, and can succeed early consuming a portion of it (exactly how much input was consumed is stored in the @hl.scala{Success#index} attribute). By using @hl.scala{End}, we can make the parse fail if it doesn't consume everything

            @p
                There is also a similar @hl.scala{Start} parser, which only succeeds at the start of the input
            @hl.ref(tests/"ExampleTests.scala", Seq("'start", ""))

        @sect{Pass, Fail}
            @hl.ref(tests/"ExampleTests.scala", Seq("'passfail", ""))

            @p
                These two parsers always succeed, or always fail, respectively. Neither consumes any input.

        @sect{Index}
            @hl.ref(tests/"ExampleTests.scala", Seq("'index", ""))

            @p
                Always succeeds, and provides the current index of the parse into the input string. e.g. useful for providing source locations for AST nodes. Consumes no input.

        @sect{Capture}
            @hl.ref(tests/"ExampleTests.scala", Seq("'capturing", ""))
            @p
                So far, all the parsers go over the input text but do not return any useful value: the @hl.scala{Success#value} attribute was always @hl.scala{()}. In order to make them do so, you use the @hl.scala{.!} operation to capture the section of the input string the parser parsed.
            @p
                Note the types of each parser:
            @ul
                @li
                    @hl.scala{capture1} is a @hl.scala{P[String]}
                @li
                    @hl.scala{capture2} is a @hl.scala{P[(String, String)]}
                @li
                    @hl.scala{capture3} is a @hl.scala{P[(String, String, String)]}
                @li
                    @hl.scala{captureRep} is a @hl.scala{P[Seq[String]]}
                @li
                    @hl.scala{captureOpt} is a @hl.scala{P[Option[String]]}
            @p
                In general, if you have a parser of type @hl.scala{TupleN},
                capturing one more section turns it into a @hl.scala{TupleN+1}.
                Furthermore, if you capture within a @hl.scala{.rep} or
                @hl.scala{.?} optional parser, it becomes a @hl.scala{P[Seq[T]]}
                or @hl.scala{P[Option[T]]} respectively

        @sect{AnyChar}
            @hl.ref(tests/"ExampleTests.scala", Seq("'anychar", ""))

            @p
                This parser parses any single character successfully. It almost
                always succeeds, except if there simply aren't any characters left
                to parse.

            @p
                There is also a plural @hl.scala{AnyChars(count: Int)} version that
                parses exactly @code{count} characters in a row, regardless of
                what they are.

        @sect{Positive Lookahead}
            @hl.ref(tests/"ExampleTests.scala", Seq("'lookahead", ""))
            @p
                The @hl.scala{&(...)} operator wraps a parser, only succeeds if it succeeds, but consumes no input. Useful for doing checks like "these characters must be followed by a whitespace, but don't consume the whitespace"

        @sect{Negative Lookahead}
            @hl.ref(tests/"ExampleTests.scala", Seq("'neglookahead", ""))
            @p
                The @hl.scala{!...} operator wraps a parser and only succeeds if it fails, also consuming no input. Useful to combine with other parsers like @sect.ref{AnyChar} to restrict the things that they can parse.
        @sect{Map}
            @hl.ref(tests/"ExampleTests.scala", Seq("'map", ""))
            @p
                Up till now, we've only dealt with
            @ul
                @li
                    @hl.scala{P[Unit]}: the default case
                @li
                    @hl.scala{P[String]}: after capturing something with @hl.scala{.!}
                @li
                    @hl.scala{P[TupleN[String]]}: capturing multiple things in series
                @li
                    @hl.scala{P[Seq[String]]}, @hl.scala{P[Option[String]]}: capturing
                    things in @hl.scala{.rep} and @hl.scala{.?}

            @p
                @hl.scala{.map} lets you convert an arbitrary @hl.scala{P[T]} into a
                @hl.scala{P[V]} by providing a @hl.scala{T => V} function. This is
                useful for converting the strings and tuples/seqs/options of strings
                into more useful data-structures.
        @sect{FlatMap}
            @hl.ref(tests/"ExampleTests.scala", Seq("'flatMap", ""))

            @p
                @hl.scala{.flatMap} allows you to dynamically choose a parser to continue with, given the result of the current parser. The example above uses it to parse balanced XML tags. @hl.scala{.flatMap} can be used to parse indentation-based grammars, and is used to do so in @a("Scalatex", href:="http://lihaoyi.github.io/Scalatex/").

            @p
                Note that the function given to @hl.scala{.flatMap} is evaluated every time this parser is tried. You should be conscious of the cost of re-creating the resultant parser every time, since FastParse parsers are somewhat expensive to initialize despite being fast per-run. If possible, store the parsers somewhere before-hand or memo-ize/cache them to avoid initializing them wastefully.
            @p
                As is normal in Scala, you can replace a @hl.scala{.flatMap} call with a @hl.scala{for}-comprehension, as below:

            @hl.ref(tests/"ExampleTests.scala", Seq("'flatMapFor", ""))

            @p
                Which is equivalent and behaves exactly the same.

            @p
                Note that @code{.flatMap} consumes whitespace between the first
                and second parsers; in cases where you do not want to do this,
                use @code{.flatMapX}

        @sect{Filter}
            @hl.ref(tests/"ExampleTests.scala", Seq("'filter", ""))

            @p
                @hl.scala{.filter} allows you to supply a predicate
                @hl.scala{T => Boolean} which is applied to the successful
                result of the current parser. If the predicate is true the
                filtered parser succeeds otherwise it fails. The example
                above uses @hl.scala{.filter} on digits to parse only even
                numbers successfully while odd numbers will fail. If the
                current parser fails then that failure is simply passed along.

        @sect{Opaque}
            @p
                Sometimes it's useful to hide parser's implementation details
                and provide a higher-level error message. @hl.scala{.opaque}
                achieves exactly that.

            @hl.ref(tests/"ExampleTests.scala", Seq("'opaque", ""))

            @p
                Parsers marked as @code{.opaque} only succeed or fail as a
                single entity and leaves no traces of underlying parsers on
                the stack.

        @sect{Log}
            @hl.ref(tests/"ExampleTests.scala", Seq("'logSimple", ""))

            @p
                @sect.ref{Debugging Parsers} is often done with the
                @hl.scala{.log()} method, which logs output whenever the
                parser is tried, and when it succeeds or fails, together with
                the location and other data when these things happen (traces
                on failures, results on successes, the presence of
                @sect.ref{Cuts}, ...). You can define custom loggers as we've
                done here, or you can just leave it to by default print to stdout.

            @p
                Generally, if a parser is doing something wrong, the workflow is:

            @ul
                @li
                    Add a @hl.scala{.log()} to the parser which is misbehaving
                @li
                    See where it's being tried, and what it's result
                    (success/failure) is, and confirm that it is misbehaving.
                @li
                    Look at the parsers it's made of; which one of them is
                    misbehaving and causing the larger parser to misbehave?
                @li
                    Add @hl.scala{.log()}s to all of them
                @li
                    Identify which of the sub-parsers is misbehaving
                @li
                    Repeat
            @p
                It's a non-trivial process, but it is generally not hard to
                figure out what's happening this way.

    @sect{Utilities}
        @p
            Fastparse provides tools for many common use cases, so you do not
            need to implement them yourself. These utilities are optimized and
            likely faster than whatever you would come up with on the spot, so
            you should use them whenever possible

        @sect{CharPred}
            @hl.ref(tests/"ExampleTests.scala", Seq("'charPred", ""))
            @p
                @hl.scala{CharPred} takes a @hl.scala{Char => Boolean}
                predicate and creates a parser that parses any single character
                that satisfies that predicate. e.g. you can use any of the
                helpful methods on @hl.scala{scala.Char} to check if a
                @hl.scala{Char} @hl.scala{isUpper}, @hl.scala{isDigit},
                @hl.scala{isControl}, etc. etc.

        @sect{CharIn}

            @hl.ref(tests/"ExampleTests.scala", Seq("'charIn", ""))

            @p
                Similar to @sect.ref{CharPred}, except you pass in literal
                strings containing regex-style character ranges. This could
                be things like @hl.scala{"abcd"} to accept the first four
                alphabets, or @hl.scala{"a-zA-Z"} to accept all alphabets
                both lower and uppercase. Since the @hl.scala{"-"} character
                is used to express character ranges, it needs to be escaped
                if you want to match it directly e.g. @hl.scala{"+\\-"}
                to match either @hl.scala{"+"} or @hl.scala{"-"}. The
                backslash character also needs to be similarly escaped
                e.g. @hl.scala{"\\\\"} to match a single backslash

        @sect{CharsWhile}

            @hl.ref(tests/"ExampleTests.scala", Seq("'charsWhile", ""))

            @p
                A repeated version of @sect.ref{CharPred}: this parser
                continually chomps away at characters as long as they continue
                passes the given predicate.

            @p
                This is a very fast parser, ideal for quickly consuming large
                numbers of characters.

        @sect{CharsWhileIn}

            @hl.ref(tests/"ExampleTests.scala", Seq("'charsWhileIn", ""))

            @p
                A combination of @sect.ref{CharsWhile} and @sect.ref{CharIn}, this
                parser continues consuming characters as long as they are within
                the set you characters you passed to it. Like @sect.ref{CharIn},
                this parser takes in literal strings representing regex-style
                character ranges that it accepts

        @sect{StringIn}
            @hl.ref(tests/"ExampleTests.scala", Seq("'stringIn", ""))

            @p
                Quickly parses one of any number of strings that you give it.
                Behind the scenes, it converts the list of strings into a Trie
                so it can attempt to parse all of them in a single pass.

            @p
                As a result, this is much faster to execute than if you had
                combined the individual strings with @hl.scala{"cow" | "cattle" | ...}.

            @p
                There is also a @code{StringInIgnoreCase} parser you can use
                if you want to match things case-insensitively.
    @sect{Cuts}
        @p
            A "cut" (@code{a ~/ b} or @code{a./} in Fastparse) is a marker in a
            recursive-descent parser that states "you cannot backtrack past this
            point". In FastParse, this serves two purposes:

        @ul
            @li
                Improving the quality of error-reporting while
                @sect.ref{Debugging Parsers}: whether it's the parser that's
                incorrect or the input that's incorrect, the improved error
                messages due to Cuts makes it easier to figure out what's wrong
            @li
                Allowing @sect.ref{Streaming Parsing}: Even when parsing
                streaming input, FastParse parsers have to buffer the input
                in-memory in case the parser needs to backtrack, but adding
                Cuts tells the parser it can safely drop earlier parts of the
                input it can no longer backtrack to.

        @sect{No Cuts}
            @hl.ref(tests/"ExampleTests.scala", Seq("'nocut", ""))
            @p
                Above we have a naive scala definition parser: it either parses a @hl.scala{val} or @hl.scala{def}, a space, and its (lower-case only) name. On a success this works as expected, and extracts the name. However, on a failure, something odd happens: the deepest parser on-failure is shown to be the entire @sect.ref{Either}, rather than just the @hl.scala{alpha} that came after @hl.scala{"val "}. Why is that?

            @p
                By default, the parse has an opportunity to backtrack whenever it enters a

            @ul
                @li
                    @hl.scala{p1 | p2}: If @hl.scala{p1} fails, it tries @hl.scala{p2}

                @li
                    @hl.scala{p.rep}, @hl.scala{p.?}: If parsing with @hl.scala{p} fails, it backtracks out of the failed parse and tries to parse whatever comes after the repeat/optional.
            @p
                e.g. in the case of @hl.scala{p1 | p2}, if it tries to parse @hl.scala{p1} and fails, it then tries to parse @hl.scala{p2}. If @i{that} fails, all that FastParse knows is that one of them should have succeeded. Specifically, FastParse does @i{not} know that after successfully parsing @hl.scala{"val "}, that only the left branch of the @sect.ref{Either} is viable! Thus it has no choice but to offer both alternatives in the error message.

        @sect{Cuts}
            @hl.ref(tests/"ExampleTests.scala", Seq("'withcut", ""))

            @p
                Cuts are added using the @hl.scala{~/} operator, which is similar to the @sect.ref{Sequence} operator @hl.scala{~}. Once the parse has crossed a cut, it can no longer backtrack past the point at which the cut occured. Hence, in this case you can see that it no longer backtracks to index 0, out of the enclosing @sect.ref{Either} parser and offering that in the error trace. Instead, it shows a much more precise error: at index @hl.scala{4}, expecting one of the small set of alphanumeric characters.
            @p
                In general, if you know that a parser is "committed" to one branch after parsing to a certain point, adding a cut will greatly improve the error message by ensuring that the parser @i{itself} knows that. Good places to add cuts include places like after keywords in a programming language parser, where a keyword can be followed by only one thing and anything else is an error.
        @sect{Rep Cuts}

            @hl.ref(tests/"ExampleTests.scala", Seq("'repnocut", ""))

            @p
                A similar problem occurs inside @sect.ref{Repeat} or @sect.ref{Optional} parsers, where the parser will give up and backtrack out if it fails, even if it really should succeed. Again, adding cuts would result in a more precise error message:

            @hl.ref(tests/"ExampleTests.scala", Seq("'repcut", ""))

            @p
                Another case where you may want to pay attention is when you are using delimiters with your @hl.scala{.rep} calls:

            @hl.ref(tests/"ExampleTests.scala", Seq("'delimiternocut", ""))

            @p
                in many (but not all!) cases, if a delimiter is parsed, you want to commit to parsing one more iteration of the @sect.ref{Repeat}. However, by default, it backtracks out of the @sect.ref{Repeat} entirely and starts trying to parse the next item in sequence (in this case the @hl.scala{")"} giving the behavior shown above.

            @p
                With a cut, the error is improved:

            @hl.ref(tests/"ExampleTests.scala", Seq("'delimitercut", ""))

            @p
                The @hl.scala{./} operator can be used without a following parser as a shortcut for @hl.scala{~/ Pass}. Compare the previous example with the following one:

            @hl.ref(tests/"ExampleTests.scala", Seq("'endcut", ""))

        @sect{Isolating Cuts}
            @p
                Because cuts prevent backtracking throughout the entire parser, they make it difficult to compose arbitrary parsers:

            @hl.ref(tests/"ExampleTests.scala", Seq("'composecut", ""))

            @p
                In the above case, @hl.scala{time1} and @hl.scala{time2} are arbitrary parsers containing @sect.ref{Cuts}. By default, that means that once you've crossed a cut, you can no longer backtrack. However, there are cases where you want to use an existing parser (for example @hl.scala{time1}) in a situation where you want to allow it to backtrack, but you don't want to rewrite it identically but without cuts. In this case it's trivial, but if @hl.scala{time1} was larger you would need to rewrite all of it as well as all of its transitive sub-parsers to make sure that not a single one had a cut inside!

            @p
                To explicitly isolate a cut to one branch of a parser, place that branch within @hl.scala{NoCut}.  Cuts within that branch will prevent backtracking inside that branch, but if that branch fails alternate branches will be tried as normal.

            @hl.ref(tests/"ExampleTests.scala", Seq("'composenocut", ""))

    @sect{Higher Order Parsers}

        @p
            It is possible to write functions that take parsers as arguments and return other parsers. These are useful because it allows for the programmatic modification of many different parsers. This can be used to generate a large amount of parsers that only vary in minor ways.

        @p
            Parser arguments @b{must be passed by name}! Parsers are immediately evaluated, so if they aren't passed by name they will be evaluated when they are passed into a function, not within it, causing either a warning about @hl.scala{a pure expression does nothing in statement position} at compile time or a @hl.scala{ClassCastException} at runtime.

        @p
            A simple example of a higher order parser is one that adds index information to the beginning and end of the parse.

        @hl.ref(tests/"ExampleTests.scala", Seq("'higherorder", ""))

        @p
            While this is a simple example, this concept to be extended to your hearts content.
